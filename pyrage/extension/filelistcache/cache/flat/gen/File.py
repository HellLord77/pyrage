# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class File(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = File()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFile(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    # File
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # File
    def Path(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # File
    def Mtime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Atime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Ctime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Crc32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Md5(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Sha1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Sha256(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def FileStart(builder):
    builder.StartObject(9)


def Start(builder):
    FileStart(builder)


def FileAddPath(builder, path):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0
    )


def AddPath(builder, path):
    FileAddPath(builder, path)


def FileAddSize(builder, size):
    builder.PrependInt64Slot(1, size, 0)


def AddSize(builder, size):
    FileAddSize(builder, size)


def FileAddMtime(builder, mtime):
    builder.PrependFloat64Slot(2, mtime, 0.0)


def AddMtime(builder, mtime):
    FileAddMtime(builder, mtime)


def FileAddAtime(builder, atime):
    builder.PrependFloat64Slot(3, atime, 0.0)


def AddAtime(builder, atime):
    FileAddAtime(builder, atime)


def FileAddCtime(builder, ctime):
    builder.PrependFloat64Slot(4, ctime, 0.0)


def AddCtime(builder, ctime):
    FileAddCtime(builder, ctime)


def FileAddCrc32(builder, crc32):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(crc32), 0
    )


def AddCrc32(builder, crc32):
    FileAddCrc32(builder, crc32)


def FileAddMd5(builder, md5):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(md5), 0
    )


def AddMd5(builder, md5):
    FileAddMd5(builder, md5)


def FileAddSha1(builder, sha1):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(sha1), 0
    )


def AddSha1(builder, sha1):
    FileAddSha1(builder, sha1)


def FileAddSha256(builder, sha256):
    builder.PrependUOffsetTRelativeSlot(
        8, flatbuffers.number_types.UOffsetTFlags.py_type(sha256), 0
    )


def AddSha256(builder, sha256):
    FileAddSha256(builder, sha256)


def FileEnd(builder):
    return builder.EndObject()


def End(builder):
    return FileEnd(builder)
