# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

from typing import Optional

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class File(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset: int = 0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = File()
        x.Init(buf, n + offset)
        return x

    # File
    def Init(self, buf: bytes, pos: int):
        self._tab = flatbuffers.table.Table(buf, pos)

    # File
    def Path(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Size(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # File
    def Mtime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Atime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Ctime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(
                flatbuffers.number_types.Float64Flags, o + self._tab.Pos
            )
        return 0.0

    # File
    def Crc32(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Md5(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # File
    def Sha1(self) -> Optional[str]:
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None


def Start(builder: flatbuffers.Builder):
    builder.StartObject(8)


def AddPath(builder: flatbuffers.Builder, path: int):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(path), 0
    )


def AddSize(builder: flatbuffers.Builder, size: int):
    builder.PrependInt64Slot(1, size, 0)


def AddMtime(builder: flatbuffers.Builder, mtime: float):
    builder.PrependFloat64Slot(2, mtime, 0.0)


def AddAtime(builder: flatbuffers.Builder, atime: float):
    builder.PrependFloat64Slot(3, atime, 0.0)


def AddCtime(builder: flatbuffers.Builder, ctime: float):
    builder.PrependFloat64Slot(4, ctime, 0.0)


def AddCrc32(builder: flatbuffers.Builder, crc32: int):
    builder.PrependUOffsetTRelativeSlot(
        5, flatbuffers.number_types.UOffsetTFlags.py_type(crc32), 0
    )


def AddMd5(builder: flatbuffers.Builder, md5: int):
    builder.PrependUOffsetTRelativeSlot(
        6, flatbuffers.number_types.UOffsetTFlags.py_type(md5), 0
    )


def AddSha1(builder: flatbuffers.Builder, sha1: int):
    builder.PrependUOffsetTRelativeSlot(
        7, flatbuffers.number_types.UOffsetTFlags.py_type(sha1), 0
    )


def End(builder: flatbuffers.Builder) -> int:
    return builder.EndObject()
